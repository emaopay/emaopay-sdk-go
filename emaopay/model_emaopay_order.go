/*
EmaoPay API

EmaoPay API.

API version: 1.0
Contact: support@emaopay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emaopay

import (
	"encoding/json"
	"time"
)

// checks if the EmaopayOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmaopayOrder{}

// EmaopayOrder struct for EmaopayOrder
type EmaopayOrder struct {
	// 金额
	Amount *string `json:"amount,omitempty"`
	// 创建时间戳
	Created *int32 `json:"created,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// 超时时间
	ExpiredAt *int32 `json:"expiredAt,omitempty"`
	Id *string `json:"id,omitempty"`
	// 商户 Id
	MerchantId *string `json:"merchantId,omitempty"`
	// 商户订单号, 对商户而言是唯一的
	MerchantTradeNo *string `json:"merchantTradeNo,omitempty"`
	// 监控 Id
	MonitorId *string `json:"monitorId,omitempty"`
	// 通知失败次数
	NotifyFailedCount *int32 `json:"notifyFailedCount,omitempty"`
	// 通知成功时间
	NotifySuccessAt *int32 `json:"notifySuccessAt,omitempty"`
	// 回调地址
	NotifyURL *string `json:"notifyURL,omitempty"`
	// 更新时间戳
	PaidAt *int32 `json:"paidAt,omitempty"`
	// 产品 Id, 可为空
	ProductId *string `json:"productId,omitempty"`
	// 二维码
	QrCode *string `json:"qrCode,omitempty"`
	// 真实金额
	RealAmount *string `json:"realAmount,omitempty"`
	// 支付成功后的跳转地址
	ReturnURL *string `json:"returnURL,omitempty"`
	// 签名
	Signature *string `json:"signature,omitempty"`
	// 状态
	Status *string `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// 用户 Id, 可为空，如果是匿名用户，那么就为空
	UserId *string `json:"userId,omitempty"`
}

// NewEmaopayOrder instantiates a new EmaopayOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmaopayOrder() *EmaopayOrder {
	this := EmaopayOrder{}
	return &this
}

// NewEmaopayOrderWithDefaults instantiates a new EmaopayOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmaopayOrderWithDefaults() *EmaopayOrder {
	this := EmaopayOrder{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *EmaopayOrder) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *EmaopayOrder) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *EmaopayOrder) SetAmount(v string) {
	o.Amount = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EmaopayOrder) GetCreated() int32 {
	if o == nil || IsNil(o.Created) {
		var ret int32
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetCreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EmaopayOrder) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int32 and assigns it to the Created field.
func (o *EmaopayOrder) SetCreated(v int32) {
	o.Created = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EmaopayOrder) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EmaopayOrder) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EmaopayOrder) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *EmaopayOrder) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *EmaopayOrder) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *EmaopayOrder) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *EmaopayOrder) GetExpiredAt() int32 {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret int32
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetExpiredAtOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *EmaopayOrder) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given int32 and assigns it to the ExpiredAt field.
func (o *EmaopayOrder) SetExpiredAt(v int32) {
	o.ExpiredAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmaopayOrder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmaopayOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmaopayOrder) SetId(v string) {
	o.Id = &v
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *EmaopayOrder) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *EmaopayOrder) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *EmaopayOrder) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetMerchantTradeNo returns the MerchantTradeNo field value if set, zero value otherwise.
func (o *EmaopayOrder) GetMerchantTradeNo() string {
	if o == nil || IsNil(o.MerchantTradeNo) {
		var ret string
		return ret
	}
	return *o.MerchantTradeNo
}

// GetMerchantTradeNoOk returns a tuple with the MerchantTradeNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetMerchantTradeNoOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantTradeNo) {
		return nil, false
	}
	return o.MerchantTradeNo, true
}

// HasMerchantTradeNo returns a boolean if a field has been set.
func (o *EmaopayOrder) HasMerchantTradeNo() bool {
	if o != nil && !IsNil(o.MerchantTradeNo) {
		return true
	}

	return false
}

// SetMerchantTradeNo gets a reference to the given string and assigns it to the MerchantTradeNo field.
func (o *EmaopayOrder) SetMerchantTradeNo(v string) {
	o.MerchantTradeNo = &v
}

// GetMonitorId returns the MonitorId field value if set, zero value otherwise.
func (o *EmaopayOrder) GetMonitorId() string {
	if o == nil || IsNil(o.MonitorId) {
		var ret string
		return ret
	}
	return *o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetMonitorIdOk() (*string, bool) {
	if o == nil || IsNil(o.MonitorId) {
		return nil, false
	}
	return o.MonitorId, true
}

// HasMonitorId returns a boolean if a field has been set.
func (o *EmaopayOrder) HasMonitorId() bool {
	if o != nil && !IsNil(o.MonitorId) {
		return true
	}

	return false
}

// SetMonitorId gets a reference to the given string and assigns it to the MonitorId field.
func (o *EmaopayOrder) SetMonitorId(v string) {
	o.MonitorId = &v
}

// GetNotifyFailedCount returns the NotifyFailedCount field value if set, zero value otherwise.
func (o *EmaopayOrder) GetNotifyFailedCount() int32 {
	if o == nil || IsNil(o.NotifyFailedCount) {
		var ret int32
		return ret
	}
	return *o.NotifyFailedCount
}

// GetNotifyFailedCountOk returns a tuple with the NotifyFailedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetNotifyFailedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NotifyFailedCount) {
		return nil, false
	}
	return o.NotifyFailedCount, true
}

// HasNotifyFailedCount returns a boolean if a field has been set.
func (o *EmaopayOrder) HasNotifyFailedCount() bool {
	if o != nil && !IsNil(o.NotifyFailedCount) {
		return true
	}

	return false
}

// SetNotifyFailedCount gets a reference to the given int32 and assigns it to the NotifyFailedCount field.
func (o *EmaopayOrder) SetNotifyFailedCount(v int32) {
	o.NotifyFailedCount = &v
}

// GetNotifySuccessAt returns the NotifySuccessAt field value if set, zero value otherwise.
func (o *EmaopayOrder) GetNotifySuccessAt() int32 {
	if o == nil || IsNil(o.NotifySuccessAt) {
		var ret int32
		return ret
	}
	return *o.NotifySuccessAt
}

// GetNotifySuccessAtOk returns a tuple with the NotifySuccessAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetNotifySuccessAtOk() (*int32, bool) {
	if o == nil || IsNil(o.NotifySuccessAt) {
		return nil, false
	}
	return o.NotifySuccessAt, true
}

// HasNotifySuccessAt returns a boolean if a field has been set.
func (o *EmaopayOrder) HasNotifySuccessAt() bool {
	if o != nil && !IsNil(o.NotifySuccessAt) {
		return true
	}

	return false
}

// SetNotifySuccessAt gets a reference to the given int32 and assigns it to the NotifySuccessAt field.
func (o *EmaopayOrder) SetNotifySuccessAt(v int32) {
	o.NotifySuccessAt = &v
}

// GetNotifyURL returns the NotifyURL field value if set, zero value otherwise.
func (o *EmaopayOrder) GetNotifyURL() string {
	if o == nil || IsNil(o.NotifyURL) {
		var ret string
		return ret
	}
	return *o.NotifyURL
}

// GetNotifyURLOk returns a tuple with the NotifyURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetNotifyURLOk() (*string, bool) {
	if o == nil || IsNil(o.NotifyURL) {
		return nil, false
	}
	return o.NotifyURL, true
}

// HasNotifyURL returns a boolean if a field has been set.
func (o *EmaopayOrder) HasNotifyURL() bool {
	if o != nil && !IsNil(o.NotifyURL) {
		return true
	}

	return false
}

// SetNotifyURL gets a reference to the given string and assigns it to the NotifyURL field.
func (o *EmaopayOrder) SetNotifyURL(v string) {
	o.NotifyURL = &v
}

// GetPaidAt returns the PaidAt field value if set, zero value otherwise.
func (o *EmaopayOrder) GetPaidAt() int32 {
	if o == nil || IsNil(o.PaidAt) {
		var ret int32
		return ret
	}
	return *o.PaidAt
}

// GetPaidAtOk returns a tuple with the PaidAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetPaidAtOk() (*int32, bool) {
	if o == nil || IsNil(o.PaidAt) {
		return nil, false
	}
	return o.PaidAt, true
}

// HasPaidAt returns a boolean if a field has been set.
func (o *EmaopayOrder) HasPaidAt() bool {
	if o != nil && !IsNil(o.PaidAt) {
		return true
	}

	return false
}

// SetPaidAt gets a reference to the given int32 and assigns it to the PaidAt field.
func (o *EmaopayOrder) SetPaidAt(v int32) {
	o.PaidAt = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *EmaopayOrder) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *EmaopayOrder) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *EmaopayOrder) SetProductId(v string) {
	o.ProductId = &v
}

// GetQrCode returns the QrCode field value if set, zero value otherwise.
func (o *EmaopayOrder) GetQrCode() string {
	if o == nil || IsNil(o.QrCode) {
		var ret string
		return ret
	}
	return *o.QrCode
}

// GetQrCodeOk returns a tuple with the QrCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetQrCodeOk() (*string, bool) {
	if o == nil || IsNil(o.QrCode) {
		return nil, false
	}
	return o.QrCode, true
}

// HasQrCode returns a boolean if a field has been set.
func (o *EmaopayOrder) HasQrCode() bool {
	if o != nil && !IsNil(o.QrCode) {
		return true
	}

	return false
}

// SetQrCode gets a reference to the given string and assigns it to the QrCode field.
func (o *EmaopayOrder) SetQrCode(v string) {
	o.QrCode = &v
}

// GetRealAmount returns the RealAmount field value if set, zero value otherwise.
func (o *EmaopayOrder) GetRealAmount() string {
	if o == nil || IsNil(o.RealAmount) {
		var ret string
		return ret
	}
	return *o.RealAmount
}

// GetRealAmountOk returns a tuple with the RealAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetRealAmountOk() (*string, bool) {
	if o == nil || IsNil(o.RealAmount) {
		return nil, false
	}
	return o.RealAmount, true
}

// HasRealAmount returns a boolean if a field has been set.
func (o *EmaopayOrder) HasRealAmount() bool {
	if o != nil && !IsNil(o.RealAmount) {
		return true
	}

	return false
}

// SetRealAmount gets a reference to the given string and assigns it to the RealAmount field.
func (o *EmaopayOrder) SetRealAmount(v string) {
	o.RealAmount = &v
}

// GetReturnURL returns the ReturnURL field value if set, zero value otherwise.
func (o *EmaopayOrder) GetReturnURL() string {
	if o == nil || IsNil(o.ReturnURL) {
		var ret string
		return ret
	}
	return *o.ReturnURL
}

// GetReturnURLOk returns a tuple with the ReturnURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetReturnURLOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnURL) {
		return nil, false
	}
	return o.ReturnURL, true
}

// HasReturnURL returns a boolean if a field has been set.
func (o *EmaopayOrder) HasReturnURL() bool {
	if o != nil && !IsNil(o.ReturnURL) {
		return true
	}

	return false
}

// SetReturnURL gets a reference to the given string and assigns it to the ReturnURL field.
func (o *EmaopayOrder) SetReturnURL(v string) {
	o.ReturnURL = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *EmaopayOrder) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *EmaopayOrder) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *EmaopayOrder) SetSignature(v string) {
	o.Signature = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmaopayOrder) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmaopayOrder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EmaopayOrder) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EmaopayOrder) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EmaopayOrder) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *EmaopayOrder) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *EmaopayOrder) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmaopayOrder) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmaopayOrder) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *EmaopayOrder) SetUserId(v string) {
	o.UserId = &v
}

func (o EmaopayOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmaopayOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !IsNil(o.ExpiredAt) {
		toSerialize["expiredAt"] = o.ExpiredAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MerchantId) {
		toSerialize["merchantId"] = o.MerchantId
	}
	if !IsNil(o.MerchantTradeNo) {
		toSerialize["merchantTradeNo"] = o.MerchantTradeNo
	}
	if !IsNil(o.MonitorId) {
		toSerialize["monitorId"] = o.MonitorId
	}
	if !IsNil(o.NotifyFailedCount) {
		toSerialize["notifyFailedCount"] = o.NotifyFailedCount
	}
	if !IsNil(o.NotifySuccessAt) {
		toSerialize["notifySuccessAt"] = o.NotifySuccessAt
	}
	if !IsNil(o.NotifyURL) {
		toSerialize["notifyURL"] = o.NotifyURL
	}
	if !IsNil(o.PaidAt) {
		toSerialize["paidAt"] = o.PaidAt
	}
	if !IsNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	if !IsNil(o.QrCode) {
		toSerialize["qrCode"] = o.QrCode
	}
	if !IsNil(o.RealAmount) {
		toSerialize["realAmount"] = o.RealAmount
	}
	if !IsNil(o.ReturnURL) {
		toSerialize["returnURL"] = o.ReturnURL
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableEmaopayOrder struct {
	value *EmaopayOrder
	isSet bool
}

func (v NullableEmaopayOrder) Get() *EmaopayOrder {
	return v.value
}

func (v *NullableEmaopayOrder) Set(val *EmaopayOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableEmaopayOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableEmaopayOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmaopayOrder(val *EmaopayOrder) *NullableEmaopayOrder {
	return &NullableEmaopayOrder{value: val, isSet: true}
}

func (v NullableEmaopayOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmaopayOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


